name: 'Check for File Changes on pull request'
description: 'Check if specific files or paths have changed in a pull request.'

inputs:
  paths_to_check:
    description: 'A multi-line string of paths to check for changes.'
    required: true

outputs:
  any_changed:
    description: "True if relevant files have changed or it's not a PR."
    value: ${{ steps.changed-files.outputs.any_changed }}

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      shell: bash
      env:
        PATHS_TO_CHECK: ${{ inputs.paths_to_check }}
      run: |
        # Your script logic is solid and correctly sets the output using $GITHUB_OUTPUT.
        if [[ "${{ github.event_name }}" != "pull_request" ]]; then
          echo "Not a PR. Assuming changes are relevant."
          echo "any_changed=true" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        echo "Validating SHAs for PR #${{ github.event.pull_request.number }}"
        MERGE_BASE=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        echo "Comparing HEAD (${{ github.event.pull_request.head.sha }}) against merge base ($MERGE_BASE)"

        mapfile -t paths < <(grep . <<< "$PATHS_TO_CHECK")

        if [ ${#paths[@]} -eq 0 ]; then
          echo "No paths provided to check. Assuming no relevant changes."
          echo "any_changed=false" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        if ! git diff --quiet $MERGE_BASE ${{ github.event.pull_request.head.sha }} -- "${paths[@]}"; then
          echo "Changes detected in relevant paths."
          echo "any_changed=true" >> "$GITHUB_OUTPUT"
        else
          echo "No changes in relevant paths."
          echo "any_changed=false" >> "$GITHUB_OUTPUT"
        fi