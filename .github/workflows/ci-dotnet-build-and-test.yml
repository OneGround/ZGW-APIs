name: CI .NET Build & Test

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/ci-dotnet-build-and-test.yml'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  check-changes:
    name: Check for files changes
    runs-on: ubuntu-latest
    outputs:
      any_changed: ${{ steps.changed-files.outputs.any_changed }}

    env:
      PATHS_TO_CHECK: >-
        'src/'
        '.github/workflows/ci-dotnet-build-and-test.yml'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      run: |
        if [[ "${{ github.event_name }}" != "pull_request" ]]; then
          echo "Not a PR. Assuming changes are relevant."
          echo "any_changed=true" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        echo "Checking for PR changes between base (${{ github.event.pull_request.base.sha }}) and head (${{ github.event.pull_request.head.sha }})"
        if ! git diff --quiet ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- ${{ env.PATHS_TO_CHECK }}; then
          echo "Changes detected in relevant paths."
          echo "any_changed=true" >> "$GITHUB_OUTPUT"
        else
          echo "No changes in relevant paths."
          echo "any_changed=false" >> "$GITHUB_OUTPUT"
        fi

  build-and-test:
    name: Build and Test .NET Project
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.any_changed == 'true'

    env:
      SOLUTION_ROOT: '${{ github.workspace }}/src'
      SOLUTION_FILE: 'ZGW.Backend.slnf'
      SOLUTION_UNIT_TESTS: 'ZGW.UnitTests.slnf'
      BUILD_CONFIGURATION: 'Release'

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      working-directory: ${{ env.SOLUTION_ROOT }}

    - name: Build
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
      working-directory: ${{ env.SOLUTION_ROOT }}

    - name: Test
      run: dotnet test ${{ env.SOLUTION_UNIT_TESTS }} --configuration ${{ env.BUILD_CONFIGURATION }} --collect:"Code coverage" --logger trx --results-directory ${{ runner.temp }}
      working-directory: ${{ env.SOLUTION_ROOT }}
      