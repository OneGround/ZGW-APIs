name: oneground-getting-started

services:
  oneground-certificates-generator:
    build:
      context: ../../tools/oneground-certificates-generator
      dockerfile: Dockerfile
    volumes:
      - ./oneground-certificates:/certs

  haproxy:
    image: haproxy:2.2-alpine
    ports:
      - 80:80
      - 443:443
    volumes:
      - ${HAPROXY_CONFIG_PATH}:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ${ONEGROUND_CERTIFICATES_PATH}:/etc/ssl/certs:ro
    restart: unless-stopped
    depends_on:
      oneground-certificates-generator:
        condition: service_completed_successfully
    networks:
      oneground:
        aliases:
          - autorisaties.oneground.local
          - besluiten.oneground.local
          - catalogi.oneground.local
          - documenten.oneground.local
          - notificaties.oneground.local
          - referentielijsten.oneground.local
          - zaken.oneground.local

  rabbit_mq:
    image: rabbitmq:3.13-management
    restart: always
    ports:
      - ${EVENTBUS_MANAGING_PORT}:15672
      - ${EVENTBUS_MESSAGING_PORT}:5672
    environment:
      RABBITMQ_DEFAULT_VHOST: "${EVENTBUS_VIRTUAL_HOST}"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 20s
    networks:
      - oneground

  postgres_docker_db:
    build:
      context: ../../localdev/postgresql/.
    volumes:
      - postgres:/var/lib/postgresql/data
      - ../../localdev/postgresql/init-database.sh:/docker-entrypoint-initdb.d
    restart: always
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_USER: "${POSTGRES_ADMIN}"
      POSTGRES_PASSWORD: "${POSTGRES_ADMIN_PASSWORD}"
      TZ: "Europe/Amsterdam"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_ADMIN}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - oneground

  redis:
    image: redis:6.0.10-alpine
    restart: always
    ports:
      - ${REDIS_PORT}:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 8
      start_period: 10s
    networks:
      - oneground

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.1
    restart: unless-stopped
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KEYCLOAK_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME_STRICT=false
      - KEYCLOAK_LOGLEVEL=debug
      - KC_DB=postgres
      - KC_DB_DATABASE=keycloak
      - KC_DB_USERNAME=${POSTGRES_ADMIN}
      - KC_DB_PASSWORD=${POSTGRES_ADMIN_PASSWORD}
      - KC_DB_URL=jdbc:postgresql://postgres_docker_db:5432/keycloak?currentSchema=keycloak
      - KC_HEALTH_ENABLED=true
    ports:
      - "${KEYCLOAK_PORT}:8080"
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { java.net.URI uri = java.net.URI.create(args[0]); System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)uri.toURL().openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/ready']
      interval: 5s
      timeout: 5s
      retries: 8
      start_period: 5s
    command: ["start-dev"]
    depends_on:
      postgres_docker_db:
        condition: service_healthy
    networks:
      - oneground

  keycloak-setup:
    build:
      context: ../../localdev/keycloak/.
      dockerfile: KeycloakSetup/Dockerfile
    environment:
      Keycloak__BaseUrl: http://keycloak:${KEYCLOAK_PORT}
      Keycloak__AdminUsername: ${KEYCLOAK_ADMIN_USERNAME}
      Keycloak__AdminPassword: ${KEYCLOAK_ADMIN_PASSWORD}
      Keycloak__RealmName: OneGround
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - oneground

  zgw.autorisaties.webapi:
    image: ghcr.io/oneground/autorisaties-api:1.0
    user: root
    volumes:
      - ../oneground-services-data/ac-data:/app/data
      - ./oneground-certificates:/usr/local/share/ca-certificates:ro
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
    command: ./OneGround.ZGW.Autorisaties.WebApi
    depends_on:
      haproxy:
        condition: service_started
      postgres_docker_db:
        condition: service_healthy
      rabbit_mq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - ${AC_PORT}:${ASPNETCORE_INTERNAL_PORT}
    env_file: "default.env"
    environment:
      ASPNETCORE_URLS: "http://*:${ASPNETCORE_INTERNAL_PORT}"
      SeedData__Applicaties: "/app/data/applicaties.json"
      ConnectionStrings__UserConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_AC_DB};Username=${POSTGRES_USER};Password=${POSTGRES_USER_PASSWORD}"
      ConnectionStrings__AdminConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_AC_DB};Username=${POSTGRES_ADMIN};Password=${POSTGRES_ADMIN_PASSWORD}"
    networks:
      - oneground

  zgw.besluiten.webapi:
    image: ghcr.io/oneground/besluiten-api:1.0
    user: root
    volumes:
      - ./oneground-certificates:/usr/local/share/ca-certificates:ro
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
    command: ./OneGround.ZGW.Besluiten.WebApi
    depends_on:
      haproxy:
        condition: service_started
      postgres_docker_db:
        condition: service_healthy
      rabbit_mq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - ${BRC_PORT}:${ASPNETCORE_INTERNAL_PORT}
    env_file: "default.env"
    environment:
      ASPNETCORE_URLS: "http://*:${ASPNETCORE_INTERNAL_PORT}"
      ConnectionStrings__UserConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_BRC_DB};Username=${POSTGRES_USER};Password=${POSTGRES_USER_PASSWORD}"
      ConnectionStrings__AdminConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_BRC_DB};Username=${POSTGRES_ADMIN};Password=${POSTGRES_ADMIN_PASSWORD}"
    networks:
      - oneground

  zgw.catalogi.webapi:
    image: ghcr.io/oneground/catalogi-api:1.3
    user: root
    volumes:
      - ./oneground-certificates:/usr/local/share/ca-certificates:ro
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
    command: ./OneGround.ZGW.Catalogi.WebApi
    depends_on:
      haproxy:
        condition: service_started
      postgres_docker_db:
        condition: service_healthy
      rabbit_mq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - ${ZTC_PORT}:${ASPNETCORE_INTERNAL_PORT}
    env_file: "default.env"
    environment:
      ASPNETCORE_URLS: "http://*:${ASPNETCORE_INTERNAL_PORT}"
      ConnectionStrings__UserConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_ZTC_DB};Username=${POSTGRES_USER};Password=${POSTGRES_USER_PASSWORD}"
      ConnectionStrings__AdminConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_ZTC_DB};Username=${POSTGRES_ADMIN};Password=${POSTGRES_ADMIN_PASSWORD}"
    networks:
      - oneground

  zgw.documenten.messaging.listener:
    image: ghcr.io/oneground/documenten-listener:1.5
    user: root
    volumes:
      - ./oneground-certificates:/usr/local/share/ca-certificates:ro
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
    command: ./OneGround.ZGW.Documenten.Messaging.Listener
    depends_on:
      haproxy:
        condition: service_started
      postgres_docker_db:
        condition: service_healthy
      rabbit_mq:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: "default.env"
    environment:
      ConnectionStrings__UserConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_DRC_DB};Username=${POSTGRES_USER};Password=${POSTGRES_USER_PASSWORD}"
      ConnectionStrings__AdminConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_DRC_DB};Username=${POSTGRES_ADMIN};Password=${POSTGRES_ADMIN_PASSWORD}"
    networks:
      - oneground

  zgw.documenten.webapi:
    image: ghcr.io/oneground/documenten-api:1.5
    user: root
    volumes:
      - ./oneground-certificates:/usr/local/share/ca-certificates:ro
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
    command: ./OneGround.ZGW.Documenten.WebApi
    depends_on:
      haproxy:
        condition: service_started
      postgres_docker_db:
        condition: service_healthy
      rabbit_mq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - ${DRC_PORT}:${ASPNETCORE_INTERNAL_PORT}
    env_file: "default.env"
    environment:
      ASPNETCORE_URLS: "http://*:${ASPNETCORE_INTERNAL_PORT}"
      ConnectionStrings__UserConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_DRC_DB};Username=${POSTGRES_USER};Password=${POSTGRES_USER_PASSWORD}"
      ConnectionStrings__AdminConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_DRC_DB};Username=${POSTGRES_ADMIN};Password=${POSTGRES_ADMIN_PASSWORD}"
      FileSystemDocumentServiceSettings__DocumentRootPath: "drc_dms"
    networks:
      - oneground

  zgw.notificaties.messaging.listener:
    image: ghcr.io/oneground/notificaties-listener:1.0
    user: root
    volumes:
      - ./oneground-certificates:/usr/local/share/ca-certificates:ro
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
    command: ./OneGround.ZGW.Notificaties.Messaging.Listener
    depends_on:
      haproxy:
        condition: service_started
      postgres_docker_db:
        condition: service_healthy
      rabbit_mq:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: "default.env"
    environment:
      ConnectionStrings__UserConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_NRC_DB};Username=${POSTGRES_USER};Password=${POSTGRES_USER_PASSWORD}"
      ConnectionStrings__AdminConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_NRC_DB};Username=${POSTGRES_ADMIN};Password=${POSTGRES_ADMIN_PASSWORD}"
      ConnectionStrings__HangfireConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_NRC_DB};Username=${POSTGRES_ADMIN};Password=${POSTGRES_ADMIN_PASSWORD}"
    networks:
      - oneground

  zgw.notificaties.webapi:
    image: ghcr.io/oneground/notificaties-api:1.0
    user: root
    volumes:
      - ./oneground-certificates:/usr/local/share/ca-certificates:ro
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
    command: ./OneGround.ZGW.Notificaties.WebApi
    depends_on:
      haproxy:
        condition: service_started
      postgres_docker_db:
        condition: service_healthy
      rabbit_mq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - ${NRC_PORT}:${ASPNETCORE_INTERNAL_PORT}
    env_file: "default.env"
    environment:
      ASPNETCORE_URLS: "http://*:${ASPNETCORE_INTERNAL_PORT}"
      ConnectionStrings__UserConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_NRC_DB};Username=${POSTGRES_USER};Password=${POSTGRES_USER_PASSWORD}"
      ConnectionStrings__AdminConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_NRC_DB};Username=${POSTGRES_ADMIN};Password=${POSTGRES_ADMIN_PASSWORD}"
    networks:
      - oneground

  zgw.referentielijsten.webapi:
    image: ghcr.io/oneground/referentielijsten-api:1.0
    user: root
    volumes:
      - ./oneground-certificates:/usr/local/share/ca-certificates:ro
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
    command: ./OneGround.ZGW.Referentielijsten.WebApi
    depends_on:
      haproxy:
        condition: service_started
    ports:
      - ${RC_PORT}:${ASPNETCORE_INTERNAL_PORT}
    env_file: "default.env"
    environment:
      ASPNETCORE_URLS: "http://*:${ASPNETCORE_INTERNAL_PORT}"
    networks:
      - oneground

  zgw.zaken.webapi:
    image: ghcr.io/oneground/zaken-api:1.5
    user: root
    volumes:
      - ./oneground-certificates:/usr/local/share/ca-certificates:ro
      - ./entrypoint.sh:/entrypoint.sh
    entrypoint: /entrypoint.sh
    command: ./OneGround.ZGW.Zaken.WebApi
    depends_on:
      haproxy:
        condition: service_started
      postgres_docker_db:
        condition: service_healthy
      rabbit_mq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - ${ZRC_PORT}:${ASPNETCORE_INTERNAL_PORT}
    env_file: "default.env"
    environment:
      ASPNETCORE_URLS: "http://*:${ASPNETCORE_INTERNAL_PORT}"
      ConnectionStrings__UserConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_ZRC_DB};Username=${POSTGRES_USER};Password=${POSTGRES_USER_PASSWORD}"
      ConnectionStrings__AdminConnectionString: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_ZRC_DB};Username=${POSTGRES_ADMIN};Password=${POSTGRES_ADMIN_PASSWORD}"
    networks:
      - oneground

volumes:
  postgres:

networks:
  oneground:
    driver: bridge