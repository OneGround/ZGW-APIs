{
  "Serilog": {
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Warning",
        "Microsoft.Hosting.Lifetime": "Warning",
        "System.Net.Http.HttpClient": "Warning",
        "Hangfire": "Warning",
        "Polly": "Fatal" // We intercept OnRetry and customize our own logging
      }
    }
  },
  "Eventbus": {
    "NotDeliveredMessageTTL": "7.00:00:00"
  },
  "ResiliencePipelineNotificaties": {
    "Retry": {
      "ShouldRetryAfterHeader": false, // If the property is set to true then the generator will resolve the delay based on the Retry-After header rules, otherwise it will return null and the retry strategy delay will generate the delay based on the configured options.
      "MaxRetryAttempts": 4,
      "BackoffType": "Exponential", // Constant, Linear or Exponential
      "UseJitter": false, // A value indicating whether jitter should be used when calculating the backoff delay between retries.
      "Delay": "00:00:01" // This property is used to cap the maximum delay between retries. It is useful when you want to limit the maximum delay after a certain number of retries when it could reach a unreasonably high values, especially if "DelayBackoffType.Exponential" backoff is used.
    },
    "Timeout": {
      "Timeout": "00:00:30"
    },
    "AddRetryOnHttpStatusCodes": [] // Extend the list of HTTP status codes (comma separated) on which retry should be performed
  },
  "Hangfire": {
    "ScheduledRetries": [ "0.00:15", "0.00:30", "0.01:00", "0.04:00", "1.00:00" ]
  },
  "Application": {
    "CallbackTimeout": "00:01:40",
    "AbonnementenCacheExpirationTime": "00:02:00"
  }
}
