// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Roxit.ZGW.Autorisaties.DataModel;

#nullable disable

namespace Roxit.ZGW.Autorisaties.DataModel.Migrations
{
    [DbContext(typeof(AcDbContext))]
    [Migration("20250508113757_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Roxit.ZGW.Autorisaties.DataModel.Applicatie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<bool>("HeeftAlleAutorisaties")
                        .HasColumnType("boolean")
                        .HasColumnName("heeft_alle_autorisaties");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modificationtime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modifiedby");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("owner");

                    b.HasKey("Id");

                    b.ToTable("applicaties");
                });

            modelBuilder.Entity("Roxit.ZGW.Autorisaties.DataModel.ApplicatieClient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicatieId")
                        .HasColumnType("uuid")
                        .HasColumnName("applicatie_id");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("client_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creationtime");

                    b.Property<DateTime?>("ModificationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modificationtime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("modifiedby");

                    b.HasKey("Id");

                    b.HasIndex("ApplicatieId");

                    b.ToTable("applicatie_clients");
                });

            modelBuilder.Entity("Roxit.ZGW.Autorisaties.DataModel.Autorisatie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicatieId")
                        .HasColumnType("uuid")
                        .HasColumnName("applicatie_id");

                    b.Property<string>("BesluitType")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("besluit_type");

                    b.Property<short>("Component")
                        .HasColumnType("smallint")
                        .HasColumnName("component");

                    b.Property<string>("InformatieObjectType")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("informatie_object_type");

                    b.Property<short?>("MaxVertrouwelijkheidaanduiding")
                        .HasColumnType("smallint")
                        .HasColumnName("max_vertrouwelijkheidaanduiding");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("owner");

                    b.Property<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.Property<string>("ZaakType")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("zaak_type");

                    b.HasKey("Id");

                    b.HasIndex("ApplicatieId");

                    b.ToTable("autorisaties");
                });

            modelBuilder.Entity("Roxit.ZGW.Autorisaties.DataModel.FutureAutorisatie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicatieId")
                        .HasColumnType("uuid")
                        .HasColumnName("applicatie_id");

                    b.Property<short>("Component")
                        .HasColumnType("smallint")
                        .HasColumnName("component");

                    b.Property<short?>("MaxVertrouwelijkheidaanduiding")
                        .HasColumnType("smallint")
                        .HasColumnName("max_vertrouwelijkheidaanduiding");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("owner");

                    b.Property<string[]>("Scopes")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("scopes");

                    b.HasKey("Id");

                    b.HasIndex("ApplicatieId");

                    b.ToTable("future_autorisaties");
                });

            modelBuilder.Entity("Roxit.ZGW.DataAccess.Migrations.FinishedDataMigration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationVersion")
                        .HasColumnType("text")
                        .HasColumnName("application_version");

                    b.Property<DateTime>("Executed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("finished_data_migrations");
                });

            modelBuilder.Entity("Roxit.ZGW.Autorisaties.DataModel.ApplicatieClient", b =>
                {
                    b.HasOne("Roxit.ZGW.Autorisaties.DataModel.Applicatie", "Applicatie")
                        .WithMany("ClientIds")
                        .HasForeignKey("ApplicatieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicatie");
                });

            modelBuilder.Entity("Roxit.ZGW.Autorisaties.DataModel.Autorisatie", b =>
                {
                    b.HasOne("Roxit.ZGW.Autorisaties.DataModel.Applicatie", "Applicatie")
                        .WithMany("Autorisaties")
                        .HasForeignKey("ApplicatieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicatie");
                });

            modelBuilder.Entity("Roxit.ZGW.Autorisaties.DataModel.FutureAutorisatie", b =>
                {
                    b.HasOne("Roxit.ZGW.Autorisaties.DataModel.Applicatie", "Applicatie")
                        .WithMany("FutureAutorisaties")
                        .HasForeignKey("ApplicatieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicatie");
                });

            modelBuilder.Entity("Roxit.ZGW.Autorisaties.DataModel.Applicatie", b =>
                {
                    b.Navigation("Autorisaties");

                    b.Navigation("ClientIds");

                    b.Navigation("FutureAutorisaties");
                });
#pragma warning restore 612, 618
        }
    }
}
